plugins {
    id "java-library"
    id "net.minecrell.plugin-yml.paper" version "0.6.0"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

group = "cloud.grabsky"
version = "1.21-${System.getenv("GITHUB_RUN_NUMBER") ?: "DEV"}"

repositories {
    mavenLocal()
    mavenCentral()
    // Repository for the Paper API.
    maven { url = "https://repo.papermc.io/repository/maven-public/" }
    // Repository for the PlaceholderAPI, API.
    maven { url = "https://repo.extendedclip.com/content/repositories/placeholderapi/" }
    // Repository containing the 'bedrock' dependency.
    maven { url = "https://maven.pkg.github.com/grabsky/bedrock"; fillCredentials(it) }
    // Repository containing the 'configuration' dependency.
    maven { url = "https://maven.pkg.github.com/grabsky/configuration"; fillCredentials(it) }
    // Repository containing the 'commands' dependency.
    maven { url = "https://maven.pkg.github.com/grabsky/commands"; fillCredentials(it) }
}

dependencies {
    // Lombok
    compileOnly("org.projectlombok:lombok:1.18.32")
    annotationProcessor("org.projectlombok:lombok:1.18.32")
    // Paper API
    compileOnly("io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT")
    // Plugin libraries, must be shaded.
    implementation("cloud.grabsky:bedrock:1.20.1-47")
    implementation("cloud.grabsky:commands:1.20.1-34")
    implementation("cloud.grabsky:configuration-paper:1.20.1-42")
    // Plugin dependencies, should be present in the classpath as required per 'paper-plugin.yml' file.
    compileOnly("me.clip:placeholderapi:2.11.6")
}

tasks {
    shadowJar { archiveFileName = "${rootProject.name}-${project.version}.jar" }
    compileJava {
        options.fork = true
        // Setting compatibility to Java 17 (above should work too).
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}

paper {
    main = "cloud.grabsky.dialogs.Dialogs"
    apiVersion = "1.20"
    serverDependencies {
        "PlaceholderAPI" { load = "BEFORE"; required = false }
    }
}

/* UTILITY METHODS */

private final def fillCredentials(final MavenArtifactRepository repository) {
    repository.credentials {
        username = findProperty("gpr.actor") ?: System.getenv("GITHUB_ACTOR")
        password = findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
    }
}
